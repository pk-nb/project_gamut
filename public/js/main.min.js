/*! Sidr - v1.2.1 - 2013-11-06
 * https://github.com/artberri/sidr
 * Copyright (c) 2013 Alberto Varela; Licensed MIT */
(function(e){var t=!1,i=!1,n={isUrl:function(e){var t=RegExp("^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*(\\?[;&a-z\\d%_.~+=-]*)?(\\#[-a-z\\d_]*)?$","i");return t.test(e)?!0:!1},loadContent:function(e,t){e.html(t)},addPrefix:function(e){var t=e.attr("id"),i=e.attr("class");"string"==typeof t&&""!==t&&e.attr("id",t.replace(/([A-Za-z0-9_.\-]+)/g,"sidr-id-$1")),"string"==typeof i&&""!==i&&"sidr-inner"!==i&&e.attr("class",i.replace(/([A-Za-z0-9_.\-]+)/g,"sidr-class-$1")),e.removeAttr("style")},execute:function(n,s,a){"function"==typeof s?(a=s,s="sidr"):s||(s="sidr");var r,d,l,c=e("#"+s),u=e(c.data("body")),f=e("html"),p=c.outerWidth(!0),g=c.data("speed"),h=c.data("side"),m=c.data("displace"),v=c.data("onOpen"),y=c.data("onClose"),x="sidr"===s?"sidr-open":"sidr-open "+s+"-open";if("open"===n||"toggle"===n&&!c.is(":visible")){if(c.is(":visible")||t)return;if(i!==!1)return o.close(i,function(){o.open(s)}),void 0;t=!0,"left"===h?(r={left:p+"px"},d={left:"0px"}):(r={right:p+"px"},d={right:"0px"}),u.is("body")&&(l=f.scrollTop(),f.css("overflow-x","hidden").scrollTop(l)),m?u.addClass("sidr-animating").css({width:u.width(),position:"absolute"}).animate(r,g,function(){e(this).addClass(x)}):setTimeout(function(){e(this).addClass(x)},g),c.css("display","block").animate(d,g,function(){t=!1,i=s,"function"==typeof a&&a(s),u.removeClass("sidr-animating")}),v()}else{if(!c.is(":visible")||t)return;t=!0,"left"===h?(r={left:0},d={left:"-"+p+"px"}):(r={right:0},d={right:"-"+p+"px"}),u.is("body")&&(l=f.scrollTop(),f.removeAttr("style").scrollTop(l)),u.addClass("sidr-animating").animate(r,g).removeClass(x),c.animate(d,g,function(){c.removeAttr("style").hide(),u.removeAttr("style"),e("html").removeAttr("style"),t=!1,i=!1,"function"==typeof a&&a(s),u.removeClass("sidr-animating")}),y()}}},o={open:function(e,t){n.execute("open",e,t)},close:function(e,t){n.execute("close",e,t)},toggle:function(e,t){n.execute("toggle",e,t)},toogle:function(e,t){n.execute("toggle",e,t)}};e.sidr=function(t){return o[t]?o[t].apply(this,Array.prototype.slice.call(arguments,1)):"function"!=typeof t&&"string"!=typeof t&&t?(e.error("Method "+t+" does not exist on jQuery.sidr"),void 0):o.toggle.apply(this,arguments)},e.fn.sidr=function(t){var i=e.extend({name:"sidr",speed:200,side:"left",source:null,renaming:!0,body:"body",displace:!0,onOpen:function(){},onClose:function(){}},t),s=i.name,a=e("#"+s);if(0===a.length&&(a=e("<div />").attr("id",s).appendTo(e("body"))),a.addClass("sidr").addClass(i.side).data({speed:i.speed,side:i.side,body:i.body,displace:i.displace,onOpen:i.onOpen,onClose:i.onClose}),"function"==typeof i.source){var r=i.source(s);n.loadContent(a,r)}else if("string"==typeof i.source&&n.isUrl(i.source))e.get(i.source,function(e){n.loadContent(a,e)});else if("string"==typeof i.source){var d="",l=i.source.split(",");if(e.each(l,function(t,i){d+='<div class="sidr-inner">'+e(i).html()+"</div>"}),i.renaming){var c=e("<div />").html(d);c.find("*").each(function(t,i){var o=e(i);n.addPrefix(o)}),d=c.html()}n.loadContent(a,d)}else null!==i.source&&e.error("Invalid Sidr Source");return this.each(function(){var t=e(this),i=t.data("sidr");i||(t.data("sidr",s),"ontouchstart"in document.documentElement?(t.bind("touchstart",function(e){e.originalEvent.touches[0],this.touched=e.timeStamp}),t.bind("touchend",function(e){var t=Math.abs(e.timeStamp-this.touched);200>t&&(e.preventDefault(),o.toggle(s))})):t.click(function(e){e.preventDefault(),o.toggle(s)}))})}})(jQuery);
/*
 * Copyright (c) 2013 nazomikan
 * https://github.com/nazomikan/PubsubJS
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
(function (name, global, definition) {
  if (typeof module !== 'undefined') {
    module.exports = definition();
  } else if (typeof require !== 'undefined' && typeof require.amd === 'object') {
    define(definition);
  } else {
    global[name] = definition();
  }
})('Pubsub', this, function () {
  var arrayProto = Array.prototype
    , slice = arrayProto.slice
    ;

  function Context() {
    this.subscribers = {};
  }

  Context.create = function createContext() {
    var context = createObject(Context.prototype)
      , args = slice.call(arguments)
      ;

    Context.apply(context, args);
    return context;
  };

  Context.prototype.publish = function (/*eventName, context, args*/) {
    var args = slice.call(arguments)
      , eventName = args.shift()
      , context = args.shift()
      , subscribers = this.subscribers[eventName] || []
      , params = [context].concat(args)
      , i
      , l
      , c
      ;

    if (!checkContext(context)) {
      throw new TypeError('publish: The second arguments must be pubsub#Context or Null');
    }

    for (i = 0, l = subscribers.length; i < l; i++) {
      subscribers[i].apply(null, params);
      // length may change by subscribeOnce.
      l !== (c = subscribers.length) && (--i, l = c);
    }
  };

  Context.prototype.subscribe = function (eventName, handler) {
    this.subscribers[eventName] = this.subscribers[eventName] || [];
    this.subscribers[eventName].push(handler);
  };

  Context.prototype.subscribeOnce = function (eventName, handler) {
    var that = this
      , func
      ;

    func = function () {
      var args = slice.call(arguments);
      handler.apply(null, args);
      that.unsubscribe(eventName, func);
    };

    that.subscribe(eventName, func);
  };

  Context.prototype.unsubscribe = function (eventName, handler) {
    var subscribers = this.subscribers
      , targetSubscribers = subscribers[eventName] || []
      , i
      , iz
      ;

    if (!handler) {
      delete subscribers[eventName];
      return;
    }

    for (i = targetSubscribers.length - 1, iz = 0; i >= iz; i--) {
      if (targetSubscribers[i] === handler) {
        targetSubscribers.splice(i, 1);
      }
    }
  };

  function Pubsub() {
    this.Context = Context;
    this.globalContext = Context.create();
  }

  Pubsub.create = function () {
    var pubsub = createObject(Pubsub.prototype)
      , args = slice.call(arguments)
      ;

    Pubsub.apply(pubsub, args);
    return pubsub;
  };

  Pubsub.prototype.publish = function (/*eventName, context, args*/) {
    var args = slice.call(arguments)
      , eventName = args.shift()
      , globalContext = this.globalContext
      , context = args.shift()
      , params = [eventName, context].concat(args)
      ;

    globalContext.publish.apply(globalContext, params);
  };

  Pubsub.prototype.subscribe = function (eventName, handler) {
    var context = this.globalContext
      ;
    context.subscribe(eventName, handler);
  };

  Pubsub.prototype.subscribeOnce = function (eventName, handler) {
    var context = this.globalContext
      ;
    context.subscribeOnce(eventName, handler);
  };

  Pubsub.prototype.unsubscribe = function (eventName, handler) {
    var context = this.globalContext
      ;
    context.unsubscribe(eventName, handler);
  };

  function createObject(obj) {
    if (Object.create) {
      return Object.create(obj);
    }

    if (arguments.length > 1) {
      throw new Error('Object.create implementation only accepts the first parameter.');
    }
    function F() {}
    F.prototype = obj;
    return new F();
  }

  function checkContext(obj) {
    if (!(obj instanceof Context) &&
      !(obj instanceof Pubsub) &&
      !(obj == null)) {
      return false;
    }
    return true;
  }

  return Pubsub;
});

var socket = io.connect();
var pubsub = Pubsub.create();

// Global app parameters
var currentRoom = null;
var userName    = "";

var clockIntervalID = 0;

var timer = 0;

var gameOn = false;
// Clock



var clock = function() {
  console.log('ticktock');
  pubsub.publish('clock');
}

pubsub.subscribe('gameStart', function() {
  // Set clock and reference to stop
  clockIntervalID = window.setInterval(clock, 1000);
});
/* Socket (echoes events to gamelogic)
 *************************************/

// update both client's timer
function sentTimer() {
  emitGameMessage('timerUpdate', timer );
}

function sentMessage() {
   if ($('#chatInput').val() != "") 
   {
      emitGameMessage('chatMessage', userName + ': ' +  $('#chatInput').val() );
      $('#chatInput').val('');
   }
}

function startGame(gameParams) {
  socket.emit('newGame', gameParams);
  pubsub.publish('newGameRequested');
}

function sendPoke() {
  console.log(userName + "sent poke to room " + currentRoom);
  //socket.emit('poke', "Someone poked you");
  emitGameMessage('poke', userName + " poked you");
}

function broadcastGameMessage(name, message) {
  // Generic message to send
  if (currentRoom != null) {
    socket.emit("broadcastGameMessage", { name: name, message: message, room: currentRoom });
  }
}

function emitGameMessage(name, message) {
  // Generic message to send
  if (currentRoom != null) {
    socket.emit("emitGameMessage", { name: name, message: message, room: currentRoom });
  }
}

socket.on('timerUpdate', function(data) {
  printTimer(data);
});

socket.on('poke', function(data) {
  printFeedback(data);
});

socket.on('chatMessage', function(data) {
  printChat(data);
});


// GETTING message Display message on client-recieve
socket.on('gameStart', function(data) {
  console.log(data);
  printFeedback(data.self + " VS " + data.opponent);
  currentRoom = data.room; // Save the room so we know who to talk to
  pubsub.publish('gameStart');
  gameOn = true; // when game start set to true, timer starts
});

// timer test
socket.on('timer', function (data) {
  if (gameOn) {
    timer++;
    sentTimer();
  }
});
// Clock Test
var clockTimes = 0;
pubsub.subscribe('clock', function() {
  printFeedback("Ticktock " + clockTimes);
  clockTimes = clockTimes + 1;
});

// Transitions between state
pubsub.subscribe('newGameRequested', function() {
  $('#newGameDiv').fadeOut(300);
  $('#waitingMessage').fadeIn(600);
});

pubsub.subscribe('gameStart', function() {
  $('#waitingMessage').fadeOut(300);
  $('#debug').fadeIn(600);
  $('#debug').fadeIn(600);
  $('#chat').fadeIn(600);
});

// Debug log
function printFeedback(string) {
  $('#debug').append("<p>" + string + "</p>");
}

function printChat(string) {
  $('#chatEntries').append("<p>" + string + "</p>");
}

// timer debug
function printTimer(string) {
  $('#counter').html(timer);
}


/* View Binding
 *************************************/
$(function() {

  $("#chatSubmit").click(function() {sentMessage();});
  $('#chat').hide();
  $("#sendPoke").click(function() { sendPoke() });
  $('#debug').hide();
  $('h2#waitingMessage').hide();

  $('#newGameForm').on('submit', function(e) {

    // HTML5 Form valdation for supporting browsers
    // TODO: Prevent submit on safari, ios, etc
    if (this.checkValidity()) {};

    e.preventDefault();
    console.log("Form intercept!");

    // Get data : value list of form inputs
    var formParams = $(this).serializeArray();
    userName = formParams[0].value;


    console.log(formParams);
    startGame(formParams);
  });
});